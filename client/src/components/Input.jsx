import { useState } from "react";

const inputHeight = {
  small: "py-[9px]",
  medium: "py-[14px]",
  large: "py-[19px]",
};

const Input = ({
  type,
  placeholder,
  autoComplete,
  className,
  value,
  inputRef,
  error,
  helperText,
  label,
  size = "medium",
  startAdornment,
  endAdornment,
  onChange,
  onKeyDown,
}) => {
  const [isPasswordVisible, setIsPasswordVisible] = useState(false);

  function togglePasswordVisibility() {
    setIsPasswordVisible((prevState) => !prevState);
  }

  if (type === "password")
    endAdornment = (
      <button
        className="text-gray-600 outline-none"
        onClick={togglePasswordVisibility}
      >
        {isPasswordVisible ? (
          <svg
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M4.2391 5.49526C3.23491 6.33337 2.53217 7.31824 2.17706 7.88052C2.1535 7.91783 2.13702 7.94396 2.12325 7.96664C2.11416 7.98161 2.10816 7.99196 2.10415 7.99918L2.10415 7.99999L2.10415 8.0008C2.10816 8.00802 2.11416 8.01837 2.12325 8.03334C2.13702 8.05602 2.1535 8.08215 2.17706 8.11946C2.53217 8.68174 3.23491 9.66661 4.2391 10.5047C5.24172 11.3415 6.50469 12 8.00025 12C9.4958 12 10.7588 11.3415 11.7614 10.5047C12.7656 9.66661 13.4683 8.68174 13.8234 8.11946C13.847 8.08215 13.8635 8.05602 13.8773 8.03334C13.8863 8.01837 13.8923 8.00801 13.8964 8.0008L13.8964 7.99999L13.8964 7.99918C13.8923 7.99197 13.8863 7.98161 13.8773 7.96664C13.8635 7.94396 13.847 7.91783 13.8234 7.88052C13.4683 7.31824 12.7656 6.33337 11.7614 5.49526C10.7588 4.65846 9.4958 3.99999 8.00025 3.99999C6.50469 3.99999 5.24172 4.65846 4.2391 5.49526ZM3.38475 4.47161C4.53715 3.5098 6.09247 2.66666 8.00025 2.66666C9.90803 2.66666 11.4634 3.5098 12.6158 4.47161C13.7666 5.43211 14.5556 6.54285 14.9508 7.16855C14.956 7.17682 14.9614 7.18526 14.9668 7.19388C15.0452 7.31731 15.1471 7.47756 15.1985 7.7021C15.2401 7.8834 15.2401 8.11658 15.1985 8.29788C15.1471 8.52242 15.0452 8.68268 14.9668 8.8061C14.9614 8.81472 14.956 8.82316 14.9508 8.83142C14.5556 9.45713 13.7666 10.5679 12.6158 11.5284C11.4634 12.4902 9.90803 13.3333 8.00025 13.3333C6.09247 13.3333 4.53715 12.4902 3.38475 11.5284C2.23391 10.5679 1.44489 9.45713 1.04973 8.83143C1.04451 8.82316 1.03915 8.81472 1.03367 8.8061C0.955257 8.68268 0.853448 8.52242 0.80198 8.29788C0.760424 8.11658 0.760424 7.8834 0.80198 7.7021C0.853448 7.47756 0.955258 7.3173 1.03367 7.19388C1.03915 7.18526 1.04451 7.17682 1.04973 7.16856C1.44489 6.54285 2.23391 5.43211 3.38475 4.47161ZM8.00025 6.66666C7.26387 6.66666 6.66692 7.26361 6.66692 7.99999C6.66692 8.73637 7.26387 9.33332 8.00025 9.33332C8.73663 9.33332 9.33358 8.73637 9.33358 7.99999C9.33358 7.26361 8.73663 6.66666 8.00025 6.66666ZM5.33358 7.99999C5.33358 6.52723 6.52749 5.33332 8.00025 5.33332C9.47301 5.33332 10.6669 6.52723 10.6669 7.99999C10.6669 9.47275 9.47301 10.6667 8.00025 10.6667C6.52749 10.6667 5.33358 9.47275 5.33358 7.99999Z"
              fill="#222222"
            />
          </svg>
        ) : (
          <svg
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M1.52885 1.52861C1.7892 1.26826 2.21131 1.26826 2.47166 1.52861L4.89748 3.95442C4.93634 3.9853 4.97223 4.02094 5.00422 4.06117L11.9316 10.9885C11.9768 11.0232 12.0181 11.0641 12.0542 11.1112L14.4717 13.5286C14.732 13.789 14.732 14.2111 14.4717 14.4714C14.2113 14.7318 13.7892 14.7318 13.5289 14.4714L11.4264 12.3689C10.4631 12.9325 9.31467 13.3333 8.00026 13.3333C6.09248 13.3333 4.53715 12.4902 3.38475 11.5284C2.23392 10.5679 1.4449 9.45715 1.04974 8.83145C1.04451 8.82318 1.03915 8.81474 1.03368 8.80612C0.955253 8.68268 0.853433 8.5224 0.801968 8.29784C0.760415 8.11652 0.760429 7.88331 0.802002 7.702C0.853501 7.47741 0.955609 7.31673 1.03424 7.19301C1.03976 7.18432 1.04516 7.17582 1.05042 7.16748C1.45202 6.53176 2.26754 5.3835 3.46382 4.40638L1.52885 2.47141C1.2685 2.21107 1.2685 1.78896 1.52885 1.52861ZM4.41217 5.35473C3.31937 6.21749 2.556 7.28069 2.17768 7.87958C2.15401 7.91704 2.13743 7.94334 2.12356 7.96616C2.11431 7.98139 2.10821 7.99191 2.10415 7.99923C2.10415 7.99948 2.10415 7.99974 2.10415 7.99999C2.10415 8.00027 2.10415 8.00054 2.10415 8.0008C2.10816 8.00802 2.11416 8.01838 2.12325 8.03335C2.13702 8.05603 2.15351 8.08217 2.17707 8.11948C2.53218 8.68176 3.23491 9.66663 4.23911 10.5047C5.24173 11.3415 6.5047 12 8.00026 12C8.90222 12 9.71852 11.7609 10.4449 11.3875L9.3548 10.2974C8.95784 10.5318 8.49451 10.6667 8.00026 10.6667C6.5275 10.6667 5.33359 9.47277 5.33359 8.00001C5.33359 7.50575 5.46845 7.04242 5.7029 6.64546L4.41217 5.35473ZM6.71198 7.65454C6.68257 7.76467 6.66692 7.88044 6.66692 8.00001C6.66692 8.73639 7.26388 9.33334 8.00026 9.33334C8.11982 9.33334 8.2356 9.3177 8.34573 9.28829L6.71198 7.65454ZM8.00026 4.00001C7.74568 4.00001 7.49877 4.019 7.25945 4.05439C6.89522 4.10824 6.5563 3.85663 6.50245 3.4924C6.44859 3.12817 6.70021 2.78924 7.06444 2.73539C7.36699 2.69066 7.67908 2.66668 8.00026 2.66668C9.90804 2.66668 11.4634 3.50982 12.6158 4.47163C13.7666 5.43213 14.5556 6.54287 14.9508 7.16858C14.956 7.17685 14.9614 7.18529 14.9668 7.1939C15.0453 7.31735 15.1471 7.47764 15.1986 7.70222C15.2401 7.88353 15.2401 8.11677 15.1985 8.29809C15.147 8.52271 15.0447 8.68362 14.966 8.80751C14.9604 8.81624 14.955 8.82477 14.9497 8.83314C14.7375 9.16904 14.4155 9.63873 13.9888 10.1483C13.7524 10.4306 13.332 10.4678 13.0497 10.2315C12.7674 9.99509 12.7301 9.57462 12.9665 9.29232C13.3474 8.83743 13.6349 8.41784 13.8225 8.12097C13.8462 8.08343 13.8629 8.05704 13.8768 8.03414C13.8861 8.01876 13.8923 8.00815 13.8964 8.00078C13.8964 8.00053 13.8964 8.00028 13.8964 8.00003C13.8964 7.99976 13.8964 7.99949 13.8964 7.99922C13.8924 7.992 13.8864 7.98164 13.8773 7.96668C13.8635 7.94399 13.847 7.91785 13.8234 7.88054C13.4683 7.31826 12.7656 6.33339 11.7614 5.49528C10.7588 4.65848 9.49581 4.00001 8.00026 4.00001Z"
              fill="#222222"
            />
          </svg>
        )}
      </button>
    );

  return (
    <div className="flex flex-col gap-[5px] text-sm leading-7">
      <span className="block text-[15px] font-medium">{label}</span>
      <div
        className={`relative flex items-center gap-2 w-full px-4 rounded border ${
          error ? "border-[red]" : "border-[#E9E9E9]"
        } focus-within:ring-[#5BBB7B] focus-within:border-[#5BBB7B] focus-within:ring-1 ${
          inputHeight[size]
        } ${className && className}`}
      >
        {startAdornment && startAdornment}
        <input
          type={isPasswordVisible ? "text" : type}
          placeholder={placeholder}
          autoComplete={autoComplete}
          className="w-full text-[14px] leading-7 outline-none"
          value={value}
          ref={inputRef}
          onChange={onChange}
          onKeyDown={onKeyDown}
        />
        {endAdornment && endAdornment}
      </div>
      <pre className="text-[red]">{helperText}</pre>
    </div>
  );
};

export default Input;
